In lexing_test.m, line 1
| %
| ^ info: [SL] COMMENT ''
In lexing_test.m, line 1
| %
|  ^ info: NEWLINE
In lexing_test.m, line 2
| % This is a comment, and then a newline
| ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ info: [SL] COMMENT 'This is a comment, and then a newline'
In lexing_test.m, line 2
| % This is a comment, and then a newline
|                                        ^ info: NEWLINE
In lexing_test.m, line 4
| % This is a continuation
| ^^^^^^^^^^^^^^^^^^^^^^^^ info: [SL] COMMENT 'This is a continuation'
In lexing_test.m, line 4
| % This is a continuation
|                         ^ info: NEWLINE
In lexing_test.m, line 5
| ...
| ^^^^ info: [SL] CONTINUATION ''
In lexing_test.m, line 6
| ...   This is really a `comment'
| ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ info: [ L] CONTINUATION "This is really a `comment'"
lexing_test.m:7:0: info: [ L] NEWLINE
In lexing_test.m, line 8
| % Identifier
| ^^^^^^^^^^^^ info: [SL] COMMENT 'Identifier'
In lexing_test.m, line 8
| % Identifier
|             ^ info: NEWLINE
In lexing_test.m, line 9
| potato
| ^^^^^^ info: [SL] IDENTIFIER
In lexing_test.m, line 9
| potato
|       ^ info: NEWLINE
In lexing_test.m, line 10
| kitten99
| ^^^^^^^^ info: [SL] IDENTIFIER
In lexing_test.m, line 10
| kitten99
|         ^ info: NEWLINE
In lexing_test.m, line 11
| miss_hit
| ^^^^^^^^ info: [SL] IDENTIFIER
In lexing_test.m, line 11
| miss_hit
|         ^ info: NEWLINE
In lexing_test.m, line 12
| p0tat0
| ^^^^^^ info: [SL] IDENTIFIER
In lexing_test.m, line 12
| p0tat0
|       ^ info: NEWLINE
In lexing_test.m, line 14
| % Number
| ^^^^^^^^ info: [SL] COMMENT 'Number'
In lexing_test.m, line 14
| % Number
|         ^ info: NEWLINE
In lexing_test.m, line 15
| 1 1.1 .1
| ^ info: [SL] NUMBER
In lexing_test.m, line 15
| 1 1.1 .1
|   ^^^ info: NUMBER
In lexing_test.m, line 15
| 1 1.1 .1
|       ^^ info: NUMBER
In lexing_test.m, line 15
| 1 1.1 .1
|         ^ info: NEWLINE
In lexing_test.m, line 16
| 1.1e2
| ^^^^^ info: [SL] NUMBER
In lexing_test.m, line 16
| 1.1e2
|      ^ info: NEWLINE
In lexing_test.m, line 17
| 1.1e+2
| ^^^^^^ info: [SL] NUMBER
In lexing_test.m, line 17
| 1.1e+2
|       ^ info: NEWLINE
In lexing_test.m, line 18
| 1.1e-2
| ^^^^^^ info: [SL] NUMBER
In lexing_test.m, line 18
| 1.1e-2
|       ^ info: NEWLINE
In lexing_test.m, line 20
| % Keyword
| ^^^^^^^^^ info: [SL] COMMENT 'Keyword'
In lexing_test.m, line 20
| % Keyword
|          ^ info: NEWLINE
In lexing_test.m, line 21
| break case catch classdef continue else elseif end for function global
| ^^^^^ info: [SL] KEYWORD
In lexing_test.m, line 21
| break case catch classdef continue else elseif end for function global
|       ^^^^ info: KEYWORD
In lexing_test.m, line 21
| break case catch classdef continue else elseif end for function global
|            ^^^^^ info: KEYWORD
In lexing_test.m, line 21
| break case catch classdef continue else elseif end for function global
|                  ^^^^^^^^ info: KEYWORD
In lexing_test.m, line 21
| break case catch classdef continue else elseif end for function global
|                           ^^^^^^^^ info: KEYWORD
In lexing_test.m, line 21
| break case catch classdef continue else elseif end for function global
|                                    ^^^^ info: KEYWORD
In lexing_test.m, line 21
| break case catch classdef continue else elseif end for function global
|                                         ^^^^^^ info: KEYWORD
In lexing_test.m, line 21
| break case catch classdef continue else elseif end for function global
|                                                ^^^ info: KEYWORD
In lexing_test.m, line 21
| break case catch classdef continue else elseif end for function global
|                                                    ^^^ info: KEYWORD
In lexing_test.m, line 21
| break case catch classdef continue else elseif end for function global
|                                                        ^^^^^^^^ info: KEYWORD
In lexing_test.m, line 21
| break case catch classdef continue else elseif end for function global
|                                                                 ^^^^^^ info: KEYWORD
In lexing_test.m, line 21
| break case catch classdef continue else elseif end for function global
|                                                                       ^ info: NEWLINE
In lexing_test.m, line 22
| if otherwise parfor persistent return spmd switch try while
| ^^ info: [SL] KEYWORD
In lexing_test.m, line 22
| if otherwise parfor persistent return spmd switch try while
|    ^^^^^^^^^ info: KEYWORD
In lexing_test.m, line 22
| if otherwise parfor persistent return spmd switch try while
|              ^^^^^^ info: KEYWORD
In lexing_test.m, line 22
| if otherwise parfor persistent return spmd switch try while
|                     ^^^^^^^^^^ info: KEYWORD
In lexing_test.m, line 22
| if otherwise parfor persistent return spmd switch try while
|                                ^^^^^^ info: KEYWORD
In lexing_test.m, line 22
| if otherwise parfor persistent return spmd switch try while
|                                       ^^^^ info: KEYWORD
In lexing_test.m, line 22
| if otherwise parfor persistent return spmd switch try while
|                                            ^^^^^^ info: KEYWORD
In lexing_test.m, line 22
| if otherwise parfor persistent return spmd switch try while
|                                                   ^^^ info: KEYWORD
In lexing_test.m, line 22
| if otherwise parfor persistent return spmd switch try while
|                                                       ^^^^^ info: [S ] KEYWORD
In lexing_test.m, line 22
| if otherwise parfor persistent return spmd switch try while
|                                                            ^ info: NEWLINE
In lexing_test.m, line 24
| % Simple operators
| ^^^^^^^^^^^^^^^^^^ info: [SL] COMMENT 'Simple operators'
In lexing_test.m, line 24
| % Simple operators
|                   ^ info: NEWLINE
In lexing_test.m, line 25
| < <= > >= == ~=
| ^ info: [SL] OPERATOR
In lexing_test.m, line 25
| < <= > >= == ~=
|   ^^ info: OPERATOR
In lexing_test.m, line 25
| < <= > >= == ~=
|      ^ info: OPERATOR
In lexing_test.m, line 25
| < <= > >= == ~=
|        ^^ info: OPERATOR
In lexing_test.m, line 25
| < <= > >= == ~=
|           ^^ info: OPERATOR
In lexing_test.m, line 25
| < <= > >= == ~=
|              ^^ info: OPERATOR
In lexing_test.m, line 25
| < <= > >= == ~=
|                ^ info: NEWLINE
In lexing_test.m, line 26
| + - * / ~ ^ \
| ^ info: [SL] OPERATOR
In lexing_test.m, line 26
| + - * / ~ ^ \
|   ^ info: OPERATOR
In lexing_test.m, line 26
| + - * / ~ ^ \
|     ^ info: OPERATOR
In lexing_test.m, line 26
| + - * / ~ ^ \
|       ^ info: OPERATOR
In lexing_test.m, line 26
| + - * / ~ ^ \
|         ^ info: OPERATOR
In lexing_test.m, line 26
| + - * / ~ ^ \
|           ^ info: OPERATOR
In lexing_test.m, line 26
| + - * / ~ ^ \
|             ^ info: OPERATOR
In lexing_test.m, line 26
| + - * / ~ ^ \
|              ^ info: NEWLINE
In lexing_test.m, line 27
| & && | ||
| ^ info: [SL] OPERATOR
In lexing_test.m, line 27
| & && | ||
|   ^^ info: OPERATOR
In lexing_test.m, line 27
| & && | ||
|      ^ info: OPERATOR
In lexing_test.m, line 27
| & && | ||
|        ^^ info: OPERATOR
In lexing_test.m, line 27
| & && | ||
|          ^ info: NEWLINE
In lexing_test.m, line 28
| .* ./ .\ .^ .'
| ^^ info: [SL] OPERATOR
In lexing_test.m, line 28
| .* ./ .\ .^ .'
|    ^^ info: OPERATOR
In lexing_test.m, line 28
| .* ./ .\ .^ .'
|       ^^ info: OPERATOR
In lexing_test.m, line 28
| .* ./ .\ .^ .'
|          ^^ info: OPERATOR
In lexing_test.m, line 28
| .* ./ .\ .^ .'
|             ^^ info: OPERATOR
In lexing_test.m, line 28
| .* ./ .\ .^ .'
|               ^ info: NEWLINE
In lexing_test.m, line 30
| % The transpose operator is special, since lexing is context sensitive
| ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ info: [SL] COMMENT 'The transpose operator is special, since lexing is context sensitive'
In lexing_test.m, line 30
| % The transpose operator is special, since lexing is context sensitive
|                                                                       ^ info: NEWLINE
In lexing_test.m, line 31
| 1'
| ^ info: [SL] NUMBER
In lexing_test.m, line 31
| 1'
|  ^ info: OPERATOR
In lexing_test.m, line 31
| 1'
|   ^ info: NEWLINE
In lexing_test.m, line 32
| potato''
| ^^^^^^ info: [SL] IDENTIFIER
In lexing_test.m, line 32
| potato''
|       ^ info: OPERATOR
In lexing_test.m, line 32
| potato''
|        ^ info: OPERATOR
In lexing_test.m, line 32
| potato''
|         ^ info: NEWLINE
In lexing_test.m, line 34
| % In a ' string '' is the single quote
| ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ info: [SL] COMMENT "In a ' string '' is the single quote"
In lexing_test.m, line 34
| % In a ' string '' is the single quote
|                                       ^ info: NEWLINE
In lexing_test.m, line 35
| 'potato'''
| ^^^^^^^^^^ info: [SL] CARRAY "potato''"
In lexing_test.m, line 35
| 'potato'''
|           ^ info: NEWLINE
In lexing_test.m, line 36
| [a, '''', b, ''',']
| ^ info: [SL] M_BRA
In lexing_test.m, line 36
| [a, '''', b, ''',']
|  ^ info: IDENTIFIER
In lexing_test.m, line 36
| [a, '''', b, ''',']
|   ^ info: COMMA
In lexing_test.m, line 36
| [a, '''', b, ''',']
|     ^^^^ info: CARRAY "''"
In lexing_test.m, line 36
| [a, '''', b, ''',']
|         ^ info: COMMA
In lexing_test.m, line 36
| [a, '''', b, ''',']
|           ^ info: IDENTIFIER
In lexing_test.m, line 36
| [a, '''', b, ''',']
|            ^ info: COMMA
In lexing_test.m, line 36
| [a, '''', b, ''',']
|              ^^^^^ info: CARRAY "'',"
In lexing_test.m, line 36
| [a, '''', b, ''',']
|                   ^ info: M_KET
In lexing_test.m, line 36
| [a, '''', b, ''',']
|                    ^ info: NEWLINE
In lexing_test.m, line 38
| % Punctiation
| ^^^^^^^^^^^^^ info: [SL] COMMENT 'Punctiation'
In lexing_test.m, line 38
| % Punctiation
|              ^ info: NEWLINE
In lexing_test.m, line 39
| ,;:()[]{}
| ^ info: [SL] COMMA
In lexing_test.m, line 39
| ,;:()[]{}
|  ^ info: [S ] SEMICOLON
In lexing_test.m, line 39
| ,;:()[]{}
|   ^ info: [S ] COLON
In lexing_test.m, line 39
| ,;:()[]{}
|    ^ info: BRA
In lexing_test.m, line 39
| ,;:()[]{}
|     ^ info: KET
In lexing_test.m, line 39
| ,;:()[]{}
|      ^ info: M_BRA
In lexing_test.m, line 39
| ,;:()[]{}
|       ^ info: M_KET
In lexing_test.m, line 39
| ,;:()[]{}
|        ^ info: C_BRA
In lexing_test.m, line 39
| ,;:()[]{}
|         ^ info: C_KET
In lexing_test.m, line 39
| ,;:()[]{}
|          ^ info: NEWLINE
In lexing_test.m, line 40
| a.b
| ^ info: [SL] IDENTIFIER
In lexing_test.m, line 40
| a.b
|  ^ info: SELECTION
In lexing_test.m, line 40
| a.b
|   ^ info: IDENTIFIER
In lexing_test.m, line 40
| a.b
|    ^ info: NEWLINE
In lexing_test.m, line 41
| @?!
| ^ info: [SL] AT
In lexing_test.m, line 41
| @?!
|  ^ info: METACLASS
In lexing_test.m, line 41
| @?!
|   ^ info: BANG ''
In lexing_test.m, line 41
| @?!
|    ^ info: NEWLINE
In lexing_test.m, line 43
| % Assignment
| ^^^^^^^^^^^^ info: [SL] COMMENT 'Assignment'
In lexing_test.m, line 43
| % Assignment
|             ^ info: NEWLINE
In lexing_test.m, line 44
| =
| ^ info: [SL] ASSIGNMENT
In lexing_test.m, line 44
| =
|  ^ info: NEWLINE
In lexing_test.m, line 46
| % Strings, again the single quote is super special
| ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ info: [SL] COMMENT 'Strings, again the single quote is super special'
In lexing_test.m, line 46
| % Strings, again the single quote is super special
|                                                   ^ info: NEWLINE
In lexing_test.m, line 47
| 'potato'
| ^^^^^^^^ info: [SL] CARRAY 'potato'
In lexing_test.m, line 47
| 'potato'
|         ^ info: NEWLINE
In lexing_test.m, line 48
| ''
| ^^ info: [SL] CARRAY ''
In lexing_test.m, line 48
| ''
|   ^ info: NEWLINE
In lexing_test.m, line 50
| % Some fun constructs that will make you really appreciate the language
| ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ info: [SL] COMMENT 'Some fun constructs that will make you really appreciate the language'
In lexing_test.m, line 50
| % Some fun constructs that will make you really appreciate the language
|                                                                        ^ info: NEWLINE
In lexing_test.m, line 51
| [1+1]
| ^ info: [SL] M_BRA
In lexing_test.m, line 51
| [1+1]
|  ^ info: NUMBER
In lexing_test.m, line 51
| [1+1]
|   ^ info: OPERATOR
In lexing_test.m, line 51
| [1+1]
|    ^ info: NUMBER
In lexing_test.m, line 51
| [1+1]
|     ^ info: M_KET
In lexing_test.m, line 51
| [1+1]
|      ^ info: NEWLINE
In lexing_test.m, line 52
| [1 +1]
| ^ info: [SL] M_BRA
In lexing_test.m, line 52
| [1 +1]
|  ^ info: NUMBER
In lexing_test.m, line 52
| [1<anon,> +1]
|   ^^^^^^^ info: COMMA
In lexing_test.m, line 52
| [1 +1]
|    ^ info: OPERATOR
In lexing_test.m, line 52
| [1 +1]
|     ^ info: NUMBER
In lexing_test.m, line 52
| [1 +1]
|      ^ info: M_KET
In lexing_test.m, line 52
| [1 +1]
|       ^ info: NEWLINE
In lexing_test.m, line 53
| [1 + 1]
| ^ info: [SL] M_BRA
In lexing_test.m, line 53
| [1 + 1]
|  ^ info: NUMBER
In lexing_test.m, line 53
| [1 + 1]
|    ^ info: OPERATOR
In lexing_test.m, line 53
| [1 + 1]
|      ^ info: NUMBER
In lexing_test.m, line 53
| [1 + 1]
|       ^ info: M_KET
In lexing_test.m, line 53
| [1 + 1]
|        ^ info: NEWLINE
In lexing_test.m, line 54
| [1+ 1]
| ^ info: [SL] M_BRA
In lexing_test.m, line 54
| [1+ 1]
|  ^ info: NUMBER
In lexing_test.m, line 54
| [1+ 1]
|   ^ info: OPERATOR
In lexing_test.m, line 54
| [1+ 1]
|     ^ info: NUMBER
In lexing_test.m, line 54
| [1+ 1]
|      ^ info: M_KET
In lexing_test.m, line 54
| [1+ 1]
|       ^ info: NEWLINE
In lexing_test.m, line 55
| [1++1]
| ^ info: [SL] M_BRA
In lexing_test.m, line 55
| [1++1]
|  ^ info: NUMBER
In lexing_test.m, line 55
| [1++1]
|   ^ info: OPERATOR
In lexing_test.m, line 55
| [1++1]
|    ^ info: OPERATOR
In lexing_test.m, line 55
| [1++1]
|     ^ info: NUMBER
In lexing_test.m, line 55
| [1++1]
|      ^ info: M_KET
In lexing_test.m, line 55
| [1++1]
|       ^ info: NEWLINE
In lexing_test.m, line 56
| [1+++1]
| ^ info: [SL] M_BRA
In lexing_test.m, line 56
| [1+++1]
|  ^ info: NUMBER
In lexing_test.m, line 56
| [1+++1]
|   ^ info: OPERATOR
In lexing_test.m, line 56
| [1+++1]
|    ^ info: OPERATOR
In lexing_test.m, line 56
| [1+++1]
|     ^ info: OPERATOR
In lexing_test.m, line 56
| [1+++1]
|      ^ info: NUMBER
In lexing_test.m, line 56
| [1+++1]
|       ^ info: M_KET
In lexing_test.m, line 56
| [1+++1]
|        ^ info: NEWLINE
In lexing_test.m, line 57
| ['foo' '1]1' ]'
| ^ info: [SL] M_BRA
In lexing_test.m, line 57
| ['foo' '1]1' ]'
|  ^^^^^ info: CARRAY 'foo'
In lexing_test.m, line 57
| ['foo'<anon,> '1]1' ]'
|       ^^^^^^^ info: COMMA
In lexing_test.m, line 57
| ['foo' '1]1' ]'
|        ^^^^^ info: CARRAY '1]1'
In lexing_test.m, line 57
| ['foo' '1]1' ]'
|              ^ info: M_KET
In lexing_test.m, line 57
| ['foo' '1]1' ]'
|               ^ info: OPERATOR
In lexing_test.m, line 57
| ['foo' '1]1' ]'
|                ^ info: NEWLINE
In lexing_test.m, line 59
| % cd is weird and needs special care
| ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ info: [SL] COMMENT 'cd is weird and needs special care'
In lexing_test.m, line 59
| % cd is weird and needs special care
|                                     ^ info: NEWLINE
In lexing_test.m, line 60
| cd ../foo/_bar % potato?
| ^^ info: [SL] IDENTIFIER
In lexing_test.m, line 60
| cd ../foo/_bar % potato?
|    ^^^^^^^^^^^ info: CARRAY
In lexing_test.m, line 60
| cd ../foo/_bar % potato?
|                ^^^^^^^^^ info: COMMENT 'potato?'
In lexing_test.m, line 60
| cd ../foo/_bar % potato?
|                         ^ info: NEWLINE
In lexing_test.m, line 61
| mkdir __potato?
| ^^^^^ info: [SL] IDENTIFIER
In lexing_test.m, line 61
| mkdir __potato?
|       ^^^^^^^^^ info: CARRAY
In lexing_test.m, line 61
| mkdir __potato?
|                ^ info: NEWLINE
lexing_test.m: lexed OK
MISS_HIT Debug Summary: 1 file(s) analysed, everything seems fine
